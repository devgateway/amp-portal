<?php
/**
 * @file
 * Define generic settings.
 */

/**
 * Implements hook_update_projects_alter().
 *
 * Hide project-specific modules from the module update list.
 */
function helpergeneric_update_projects_alter(&$projects) {
  $not_updated = array();
  foreach ($projects as $project_name => $project_info) {
    if ($project_info['project_type'] == 'core') {
      continue;
    }

    // Determine where the module is located.
    $projet_path = drupal_get_path($project_info['project_type'], $project_info['name']);

    // Projects like 'features_extra' don't contain a module called 'features_extra' so an empty path is returned.
    $project_location = '';
    if (!empty($projet_path)) {
      $project_location = dirname($projet_path);
    }

    // Do not query updates for custom modules and features.
    switch ($project_location) {
      case 'sites/all/modules/custom':
      case 'sites/all/modules/features':
        // Hide project-specific modules from the update list.
        $not_updated[] = $projects[$project_name]['info']['name'];
        unset($projects[$project_name]);
        break;
    }
  }

  if (!empty($not_updated)) {
    $message = 'The following modules are not being checked for updates: @moduleslist';
    drupal_set_message(t($message, array('@moduleslist' => implode(', ', $not_updated))), 'warning');
  }
}

/**
 * Implements hook_features_api_alter().
 *
 * Prevent exporting of some features API components.
 */
function helpergeneric_features_api_alter(&$components) {
  // We manage menu_links manually or via update scripts.
  unset($components['menu_links']);
}

/**
 * Implements hook_features_component_export_alter().
 *
 * Filter the available compoenents in the (re)create feature form.
 */
function helpergeneric_features_component_export_alter(&$component_export, $component) {
  switch ($component) {
    case 'dependencies':
      // Hide custom features from dependencies.
      $entries_list = array(
        'ampet_blog',
        'ampet_page',
        'amppermissions',
        'ampsettings',
        'ampviewsettings',
      );
      break;

    case 'menu_custom':
      // Hide menus.
      $entries_list = array(
        'devel',
        'main-menu',
        'management',
        'navigation',
        'user-menu',
      );
      break;

    case 'user_permission':
      $entries_list = array(
        // Hide admin_menu module permissions.
        'access administration menu',
        'flush caches',
        'display drupal links',

        // Hide devel module permissions.
        'access devel information',
        'execute php code',
        'switch users',

        // Hide ds_ui module permissions.
        'admin_view_modes',
        'admin_fields',
        'admin_classes',

        // Hide less module permissions.
        'administer less',
      );
      break;

    case 'variable':
      // Hide variables that should not be exported.
      $entries_list = array(
        'additional_settings__active_tab_blog',
        'additional_settings__active_tab_page',
        'cache',
        'cache_lifetime',
        'clean_url',
        'cron_key',
        'cron_last',
        'css_js_query_string',
        'ctools_last_cron',
        'date_api_version',

        'date_default_timezone',
        'date_first_day',
        'date_format_long',
        'date_format_medium',
        'date_format_short',
        'date_format_shortest',
        'date_views_month_format_with_year',
        'date_views_month_format_without_year',
        'date_views_day_format_with_year',
        'date_views_day_format_without_year',
        'date_views_week_format_with_year',
        'date_views_week_format_without_year',

        'dblog_row_limit',
        'drupal_private_key',
        'drupal_css_cache_files',
        'drupal_http_request_fails',
        'drupal_js_cache_files',
        // 'entity_cache_tables_created',
        // 'entityreference:base-tables',
        'error_level',
        'features_codecache',
        'features_default_export_path',
        'features_ignored_orphans',
        'features_semaphore',
        'file_temporary_path',
        'htmlpurifier_version_current',
        // 'image_toolkit',
        'install_profile',
        'install_task',
        'install_time',
        // 'job_scheduler_rebuild_all',
        // 'less_devel',
        // 'less_dir',
        // 'less_engine',
        // 'less_watch',
        'menu_expanded',
        'menu_masks',
        'page_cache_maximum_age',
        'page_compression',
        // 'path_alias_whitelist',
        'preprocess_css',
        'preprocess_js',
        'site_default_country',
        'site_mail',
        'site_name',
        'theme_default',
        'update_last_check',
        'update_scripts_clear_cache',
        'update_scripts_directory',
        'update_scripts_revert_features',
        'views_ui_always_live_preview',
        'views_ui_show_advanced_help_warning',
        'views_ui_show_master_display',
        'views_ui_show_performance_statistics',
        'views_ui_show_sql_query',
      );
      break;

    case 'views_view':
      // Hide views.
      $entries_list = array(
        'redirects',
      );
      break;

  }

  if (empty($entries_list)) {
    return;
  }

  $removed_entries_list = array();
  foreach ($entries_list as $name) {
    if (isset($component_export['options']['sources'][$name])) {
      unset($component_export['options']['sources'][$name]);
      $removed_entries_list[] = check_plain($name);
    }

    if ($component == 'dependencies') {
      if (isset($component_export['options']['detected'][$name])) {
        unset($component_export['options']['detected'][$name]);
      }
    }
  }

  if (!empty($removed_entries_list)) {
    $message = 'The following are not listed in the <b>%name</b> components export list: @entries';
    $t_args = array(
      '%name' => $component_export['name'] . " (${component})",
      '@entries' => implode(', ', $removed_entries_list),
    );
    drupal_set_message(t($message, $t_args), 'warning');
  }
}

/**
 * Implements hook_htmlpurifier_info()
 *
 * @see: http://htmlpurifier.org/live/configdoc/plain.html
 */
function helpergeneric_htmlpurifier_info() {
  $info = array();

  $info['htmlpurifier_custom'] = array(
    'name' => 'HTML Purifier Custom Settings',
    'description' => 'Provides some default configuration. Turn off the following Drupal filters: "Convert URLs into links", "Convert line breaks into HTML".',
    'allowed' => array(
      'Cache.DefinitionImpl',
      'Cache.SerializerPath',

      'Attr.EnableID',
      'AutoFormat.AutoParagraph',
      'AutoFormat.Linkify',
      'Cache.DefinitionImpl',
      'Core.AggressivelyFixLt',
      'HTML.FlashAllowFullScreen',
      'HTML.SafeEmbed',
      'HTML.SafeObject',
      'HTML.SafeIframe',
      'URI.SafeIframeRegexp',
      'URI.DisableExternalResources',
    ),
    'settings' => array(
      // List of allowed link frame targets.
      'Attr.AllowedFrameTargets' => array('_self', '_blank'),

      // Allows the ID attribute in HTML.
      'Attr.EnableID' => FALSE,

      // This directive turns on auto-paragraphing, where double newlines are
      // converted in to paragraphs whenever possible.
      // The same as "Convert line breaks into HTML" Drupal filter.
      'AutoFormat.AutoParagraph' => TRUE,

      // This directive turns on linkification, auto-linking http, ftp and
      // https URLs.
      // The same as "Convert URLs into links" Drupal filter.
      'AutoFormat.Linkify' => TRUE,

      // This directive defines which method to use when caching definitions,
      // the complex data-type that makes HTML Purifier tick
      'Cache.DefinitionImpl' => 'Drupal',

      // If your users make very well-formed HTML, you can set this directive false.
      'Core.AggressivelyFixLt' => TRUE,

      // Allows flash applications to be viewed in full screen.
      'HTML.FlashAllowFullScreen' => TRUE,

      // Whether or not to permit embed tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeEmbed' => TRUE,

      // Whether or not to permit object tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeObject' => TRUE,

      // Whether or not to permit iframe tags in untrusted documents.
      // This directive must be accompanied by a whitelist of permitted
      // iframes, such as %URI.SafeIframeRegexp.
      'HTML.SafeIframe' => TRUE,

      // A regex that will be matched against an iframe URI.
      // This directive only has an effect if %HTML.SafeIframe is enabled.
      'URI.SafeIframeRegexp' => '%^http://(www.youtube.com/embed/|js.aiddata.org/|aiddata.org/|/player.vimeo.com/video/)%',

      // Disables the embedding of external resources.
      'URI.DisableExternalResources' => TRUE,
    ),

    'weight' => -20,
  );

  return $info;
}

/**
 * Implements hook_form_alter().
 */
function helpergeneric_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    drupal_set_title('Log in');
    $form['actions']['cancel'] = array(
      '#type' => 'link',
      '#title' => t('Lost password?'),
      '#href' => 'user/password',
      '#weight' => 20,
    );
  }
}

/**
 * Determines if the current user is user 1.
 *
 * @return bool
 *   TRUE if the user is user 1, FALSE otherwise.
 */
function helpergeneric_is_user_one() {
  return $GLOBALS['user']->uid == 1;
}
