<?php
/**
 * @file
 * Define generic settings.
 */

module_load_include('inc', 'helpergeneric', 'helpergeneric.field');
module_load_include('inc', 'helpergeneric', 'helpergeneric.forms');

/**
 * Implements hook_menu().
 */
function helpergeneric_menu() {
  $items = array();

  $items['admin/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer Project settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer nodes'),
    'weight' => 30,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/settings/static-content'] = array(
    'title' => 'Static Content',
    'description' => 'Administer static page content for the homepage and other pages.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer nodes'),
    'weight' => 30,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/settings/static-content/homepage'] = array(
    'title' => 'Homepage',
    'description' => 'Configure homepage content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helpergeneric_homepage_content_settings_form'),
    'access arguments' => array('administer nodes'),
    'file' => 'helpergeneric.content.inc',
  );

  $items['admin/settings/static-content/blog'] = array(
    'title' => 'Blog Sidebar',
    'description' => 'Configure blog sidebar content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helpergeneric_blog_content_settings_form'),
    'access arguments' => array('administer nodes'),
    'file' => 'helpergeneric.content.inc',
  );

  $items['admin/settings/generic'] = array(
    'title' => 'Generic settings',
    'description' => 'Project generic settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helpergeneric_settings_form'),
    'access arguments' => array('administer nodes'),
    'file' => 'helpergeneric.admin.inc',
    'weight' => -32,
  );

  $items['admin/settings/main-menu'] = array(
    'title' => 'Edit Main menu',
    'description' => 'Edit the main menu links.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/menu/manage/main-menu'),
    'access arguments' => array('administer menu'),
    'weight' => -19,
  );

  $items['admin/settings/user-menu'] = array(
    'title' => 'Edit User menu',
    'description' => 'Edit the top user menu links.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/menu/manage/user-menu'),
    'access arguments' => array('administer menu'),
    'weight' => -18,
  );

  // Page callback that outputs JSON for project specific nodevar autocomplete suggestions.
  $items['helpergeneric/contentblock/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'helpergeneric_entity_autocomplete',
    'page arguments' => array('contentblock'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'file' => 'helpergeneric.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_htmlpurifier_info()
 *
 * @see: http://htmlpurifier.org/live/configdoc/plain.html
 */
function helpergeneric_htmlpurifier_info() {
  $info = array();

  $info['htmlpurifier_custom'] = array(
    'name' => 'HTML Purifier Custom Settings',
    'description' => 'Provides some default configuration. Turn off the following Drupal filters: "Convert URLs into links", "Convert line breaks into HTML".',
    'allowed' => array(
      'Cache.DefinitionImpl',
      'Cache.SerializerPath',

      'Attr.EnableID',
      'AutoFormat.AutoParagraph',
      'AutoFormat.Linkify',
      'Cache.DefinitionImpl',
      'Core.AggressivelyFixLt',
      'HTML.FlashAllowFullScreen',
      'HTML.SafeEmbed',
      'HTML.SafeObject',
      'HTML.SafeIframe',
      'URI.SafeIframeRegexp',
      'URI.DisableExternalResources',
    ),
    'settings' => array(
      // List of allowed link frame targets.
      'Attr.AllowedFrameTargets' => array('_self', '_blank'),

      // Allows the ID attribute in HTML.
      'Attr.EnableID' => FALSE,

      // This directive turns on auto-paragraphing, where double newlines are
      // converted in to paragraphs whenever possible.
      // The same as "Convert line breaks into HTML" Drupal filter.
      'AutoFormat.AutoParagraph' => TRUE,

      // This directive turns on linkification, auto-linking http, ftp and
      // https URLs.
      // The same as "Convert URLs into links" Drupal filter.
      'AutoFormat.Linkify' => TRUE,

      // This directive defines which method to use when caching definitions,
      // the complex data-type that makes HTML Purifier tick
      'Cache.DefinitionImpl' => 'Drupal',

      // If your users make very well-formed HTML, you can set this directive false.
      'Core.AggressivelyFixLt' => TRUE,

      // Allows flash applications to be viewed in full screen.
      'HTML.FlashAllowFullScreen' => TRUE,

      // Whether or not to permit embed tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeEmbed' => TRUE,

      // Whether or not to permit object tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeObject' => TRUE,

      // Whether or not to permit iframe tags in untrusted documents.
      // This directive must be accompanied by a whitelist of permitted
      // iframes, such as %URI.SafeIframeRegexp.
      'HTML.SafeIframe' => TRUE,

      // A regex that will be matched against an iframe URI.
      // This directive only has an effect if %HTML.SafeIframe is enabled.
      'URI.SafeIframeRegexp' => '%^http://(www.youtube.com/embed/|js.aiddata.org/|aiddata.org/|/player.vimeo.com/video/)%',

      // Disables the embedding of external resources.
      'URI.DisableExternalResources' => TRUE,
    ),

    'weight' => -20,
  );

  return $info;
}

/**
 * Determines if we should cleanup the UI in a way that developers can disable.
 *
 * NOTE: This is NOT for security, you should still set proper access settings.
 */
function helpergeneric_cleanup_ui() {
  // Allow anyone with the cookie to force ui cleanup settings.
  if (isset($_COOKIE['helpergeneric_cleanup_ui_force'])) {
    return (bool) $_COOKIE['helpergeneric_cleanup_ui_force'];
  }

  // If variable is set, force ui cleanup settings only for UID1.
  $forced_value = variable_get('helpergeneric_cleanup_ui_force', NULL);
  if ($GLOBALS['user']->uid == 1 && isset($forced_value)) {
    return (bool) $forced_value;
  }

  return TRUE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function helpergeneric_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Attach "Edit" link to the user page.
  if ($router_item['path'] == 'user/%') {
    if (count($router_item['original_map']) == 2) {
      // Load the edit menu router item.
      $action_router_path = implode('/', $router_item['original_map']) . '/edit';
      $action_router_item = menu_get_item($action_router_path);

      if ($action_router_item['access']) {
        $action_router_item['localized_options']['theme extra'] = array(
          'entity action' => TRUE,
          'icon' => 'edit',
        );

        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $action_router_item,
          '#weight' => -50,
        );
      }
    }
  }

  // Attach "Cancel" link to the user edit page.
  if ($router_item['path'] == 'user/%/edit') {

    // Load the view menu router item.
    $action_router_path = implode('/', array_slice($router_item['original_map'], 0, -1));
    $action_router_item = menu_get_item($action_router_path);

    if ($action_router_item['access']) {
      $action_router_item['localized_options']['theme extra'] = array(
        'entity action' => TRUE,
        'title' => 'Cancel',
        'prefix' => '(',
        'suffix' => ')',
      );

      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $action_router_item,
        '#weight' => 50,
      );
    }
  }

  // Attach action links to node and mongo entities.
  $position = 1;
  $attach_entity_actions = TRUE;
  if (empty($router_item['load_functions'][$position]) || empty($router_item['map'][$position])) {
    $attach_entity_actions = FALSE;
  }
  else {
    if (!in_array($router_item['load_functions'][$position], array('entity_object_load', 'node_load'))) {
      $attach_entity_actions = FALSE;
    }
  }

  if ($attach_entity_actions) {
    // Attach "Edit" link to the entity view page title.
    if (count($router_item['original_map']) == 2) {
      // Load the edit menu router item.
      $action_router_path = implode('/', $router_item['original_map']) . '/edit';
      $action_router_item = menu_get_item($action_router_path);

      if ($action_router_item['access']) {
        $action_router_item['localized_options']['theme extra'] = array(
          'entity action' => TRUE,
          'icon' => 'edit',
        );

        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $action_router_item,
          '#weight' => -50,
        );
      }
    }

    // Attach "Delete" link to the entity view page title.
    if (count($router_item['original_map']) == 2) {
      // Load the edit menu router item.
      $action_router_path = implode('/', $router_item['original_map']) . '/delete';
      $action_router_item = menu_get_item($action_router_path);

      if ($action_router_item['access']) {
        $action_router_item['localized_options']['theme extra'] = array(
          'entity action' => TRUE,
          'icon' => 'delete',
        );

        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $action_router_item,
          '#weight' => -49,
        );
      }
    }

    // Attach "Cancel" link to the entity edit page title.
    if (count($router_item['original_map']) == 3 && $router_item['original_map'][2] == 'edit') {

      $url_options = drupal_parse_url($_GET['destination']);
      unset($_GET['destination']);

      $alt_path= NULL;
      if (!empty($url_options['path'])) {
        $alt_path = $url_options['path'];
      }

      if ($alt_path) {
        $link_item = array(
          'title' => 'Cancel', // This is not used if we provide 'theme extra' settings.
          'href' => $alt_path,
          'localized_options' => $url_options,
        );
        $link_item['localized_options']['theme extra'] = array(
          'entity action' => TRUE,
          'title' => 'Cancel',
          'prefix' => '(',
          'suffix' => ')',
        );

        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',

          '#link' => $link_item,
          '#weight' => 50,
        );
      }
      else {
        // Load the view menu router item.
        $action_router_path = implode('/', array_slice($router_item['original_map'], 0, -1));
        $action_router_item = menu_get_item($action_router_path);

        if ($action_router_item['access']) {
          $action_router_item['localized_options']['theme extra'] = array(
            'entity action' => TRUE,
            'title' => 'Cancel',
            'prefix' => '(',
            'suffix' => ')',
          );

          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $action_router_item,
            '#weight' => 50,
          );
        }
      }
    }
  }

  // Attach "Add blog entry" link to "Blog" listing page title.
  if ($root_path == 'blog') {
    $action_router_item = menu_get_item('node/add/blog');

    if ($action_router_item['access']) {
      $action_router_item['localized_options']['attributes']['target'] = '_blank';
      $action_router_item['localized_options']['theme extra'] = array(
        'entity action' => TRUE,
        'icon' => 'add',
      );

      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $action_router_item,
        '#weight' => 40,
      );
    }
  }

  // Attach "Add content block" link to "Page Content" settings page title.
  if (strpos($root_path, 'admin/settings/static-content/') === 0) {
    $action_router_item = menu_get_item('contentblock/add');

    if ($action_router_item['access']) {
      $action_router_item['localized_options']['attributes']['target'] = '_blank';
      $action_router_item['localized_options']['theme extra'] = array(
        'entity action' => TRUE,
        'icon' => 'add',
      );

      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $action_router_item,
        '#weight' => 40,
      );
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function helpergeneric_entity_load($entities, $entity_type) {
  if ($entity_type != 'node') {
    return;
  }

  foreach ($entities as $id => $entity) {
    $local_actions = menu_local_actions();
    if (!empty($local_actions)) {
      $entity->action_links = drupal_render($local_actions);
    }
  }
}
