<?php
/**
 * @file
 * Define generic settings.
 */

include_once 'helpergeneric.forms.inc';

/**
 * Implements hook_update_projects_alter().
 *
 * Hide project-specific modules from the module update list.
 */
function helpergeneric_update_projects_alter(&$projects) {
  $not_updated = array();
  foreach ($projects as $project_name => $project_info) {
    if ($project_info['project_type'] == 'core') {
      continue;
    }

    // Determine where the module is located.
    $projet_path = drupal_get_path($project_info['project_type'], $project_info['name']);

    // Projects like 'features_extra' don't contain a module called 'features_extra' so an empty path is returned.
    $project_location = '';
    if (!empty($projet_path)) {
      $project_location = dirname($projet_path);
    }

    // Do not query updates for custom modules and features.
    switch ($project_location) {
      case 'sites/all/modules/custom':
      case 'sites/all/modules/features':
        // Hide project-specific modules from the update list.
        $not_updated[] = $projects[$project_name]['info']['name'];
        unset($projects[$project_name]);
        break;
    }
  }

  if (!empty($not_updated)) {
    $message = 'The following modules are not being checked for updates: @moduleslist';
    drupal_set_message(t($message, array('@moduleslist' => implode(', ', $not_updated))), 'warning');
  }
}

/**
 * Implements hook_htmlpurifier_info()
 *
 * @see: http://htmlpurifier.org/live/configdoc/plain.html
 */
function helpergeneric_htmlpurifier_info() {
  $info = array();

  $info['htmlpurifier_custom'] = array(
    'name' => 'HTML Purifier Custom Settings',
    'description' => 'Provides some default configuration. Turn off the following Drupal filters: "Convert URLs into links", "Convert line breaks into HTML".',
    'allowed' => array(
      'Cache.DefinitionImpl',
      'Cache.SerializerPath',

      'Attr.EnableID',
      'AutoFormat.AutoParagraph',
      'AutoFormat.Linkify',
      'Cache.DefinitionImpl',
      'Core.AggressivelyFixLt',
      'HTML.FlashAllowFullScreen',
      'HTML.SafeEmbed',
      'HTML.SafeObject',
      'HTML.SafeIframe',
      'URI.SafeIframeRegexp',
      'URI.DisableExternalResources',
    ),
    'settings' => array(
      // List of allowed link frame targets.
      'Attr.AllowedFrameTargets' => array('_self', '_blank'),

      // Allows the ID attribute in HTML.
      'Attr.EnableID' => FALSE,

      // This directive turns on auto-paragraphing, where double newlines are
      // converted in to paragraphs whenever possible.
      // The same as "Convert line breaks into HTML" Drupal filter.
      'AutoFormat.AutoParagraph' => TRUE,

      // This directive turns on linkification, auto-linking http, ftp and
      // https URLs.
      // The same as "Convert URLs into links" Drupal filter.
      'AutoFormat.Linkify' => TRUE,

      // This directive defines which method to use when caching definitions,
      // the complex data-type that makes HTML Purifier tick
      'Cache.DefinitionImpl' => 'Drupal',

      // If your users make very well-formed HTML, you can set this directive false.
      'Core.AggressivelyFixLt' => TRUE,

      // Allows flash applications to be viewed in full screen.
      'HTML.FlashAllowFullScreen' => TRUE,

      // Whether or not to permit embed tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeEmbed' => TRUE,

      // Whether or not to permit object tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeObject' => TRUE,

      // Whether or not to permit iframe tags in untrusted documents.
      // This directive must be accompanied by a whitelist of permitted
      // iframes, such as %URI.SafeIframeRegexp.
      'HTML.SafeIframe' => TRUE,

      // A regex that will be matched against an iframe URI.
      // This directive only has an effect if %HTML.SafeIframe is enabled.
      'URI.SafeIframeRegexp' => '%^http://(www.youtube.com/embed/|js.aiddata.org/|aiddata.org/|/player.vimeo.com/video/)%',

      // Disables the embedding of external resources.
      'URI.DisableExternalResources' => TRUE,
    ),

    'weight' => -20,
  );

  return $info;
}

/**
 * Determines if the current user is user 1.
 *
 * @return bool
 *   TRUE if the user is user 1, FALSE otherwise.
 */
function helpergeneric_is_user_one() {
  if (variable_get('helpergeneric_is_user_one_skip', FALSE)) {
    return FALSE;
  }

  return $GLOBALS['user']->uid == 1;
}
