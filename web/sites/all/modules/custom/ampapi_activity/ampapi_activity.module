<?php

/**
 * Define administrative URLs.
 */
define('AMPACTIVITY_UI_PATH', 'activity');
define('AMPACTIVITY_ADMIN_UI_PATH', 'admin/content/activity');
define('AMPACTIVITY_BUNDLE_ADMIN_UI_PATH', 'admin/structure/activity');


interface activityMapperAutocompleteInterface {
  public function autocomplete($plugin, $string);
  public function getAutocompleteValue($plugin, $data, $type);
}

/**
 * Implements hook_entity_info().
 */
function ampapi_activity_entity_info() {
  $entity_info = array();

  $entity_info['activity'] = array(
    'label' => t('Activity'),
    'plural label' => t('Activities'),
    'description' => t('A survey activity.'),

    // We don't have a base table, entities are stored in AMP.
    'base table' => NULL,
    'api resource path' => 'data/report/custom/paginate',
    'module' => 'ampapi_activity',

    'entity class' => 'ActivityEntity',
    'controller class' => 'ActivityEntityController',
    // 'extra fields controller class' => 'ampAPIExtraFieldsController',
    'metadata controller class' => 'ampAPIMetadataController',
    // 'i18n controller class' => 'EntityDefaultI18nStringController',

    'entity cache' => FALSE,
    'field cache' => FALSE,
    'static cache' => TRUE,

    'fieldable' => FALSE,

    'access callback' => 'ampapi_activity_access',
    'uri callback' => 'entity_class_uri',
    // 'load hook' => 'ampapi_load',

    'entity keys' => array(
      'id' => 'id',
      // 'revision' => 'vid',
      // 'bundle' => 'type',
      'label' => 'title',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      // 'bundle' => 'type',
    ),
    // 'bundles callback' => 'ampapi_activity_get_types',

    // 'admin ui' => array(
    //   'path' => AMPACTIVITY_ADMIN_UI_PATH,
    //   'entity path' => AMPACTIVITY_UI_PATH,
    //   'bundle path' => AMPACTIVITY_BUNDLE_ADMIN_UI_PATH,
    //   'controller class' => 'EntityContentUIController',
    //   'file' => 'ampapi_activity.admin.inc',
    // ),

    // 'view modes' => array(
    //   'full' => array(
    //     'label' => t('Full content'),
    //     'custom settings' => FALSE,
    //   ),
    // ),
  );

  // foreach ($entity_info['activity']['bundles callback'] as $type => $bundle_info) {
  //   $entity_info['activity']['bundles'][$type] = array(
  //     'label' => $bundle_info['label'],
  //     'admin' => array(
  //       'path' => AMPACTIVITY_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
  //     ),
  //   );
  // }

  return $entity_info;
}

/**
 * Implements hook_entity_query_alter().
 */
function ampapi_activity_entity_query_alter($query) {
  if (isset($query->entityConditions['entity_type'])) {
    $entity_type = $query->entityConditions['entity_type']['value'];
    if ($entity_type == 'activity') {
      // Use custom EntityFieldQuery executeCallback for entities loaded from the AMP API.
      $query->executeCallback = 'ampapi_execute_query';
    }
  }
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function ampapi_activity_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  if ($owner == 'ampapi' && $plugin_type == 'mapper') {
    return 'plugins/mappers';
  }
}

/**
 * Implements hook_views_api().
 */
function ampapi_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ampapi_activity') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function ampapi_activity_menu() {
  $items = array();


  $mappers = ampapi_get_mappers();
  foreach ($mappers as $key => $plugin) {
    if (empty($plugin['property name'])) {
      continue;
    }

    $items['ampapi/autocomplete/' . $plugin['property name']] = array(
      'title' => $plugin['title'] . ' Autocomplete',
      'page callback' => 'ampapi_activity_autocomplete',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'ampapi_activity.pages.inc',
    );
  }

  // @TODO: Add session token to prevent users abusing the system.
  $items['activities/export'] = array(
    'title' => 'Activity search export',
    'page callback' => 'ampapi_activity_search_export',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ampapi_activity.pages.inc',
  );

  return $items;
}

/**
 * Returns the size of a file.
 */
function _ampapi_human_filesize($path, $decimals = 2) {
  $bytes = filesize($path);

  $factor = floor((strlen($bytes) - 1) / 3);

  $sz = 'BKMGTP';
  return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . @$sz[$factor] . 'b';
}

/**
 * Implements hook_views_pre_build()
 *
 * Update all displays of the Activities view and remove disabled fields and filters.
 */
function ampapi_activity_views_pre_build(&$view) {
  if ($view->name != 'activities') {
    return;
  }

  // Get a list of enabled columns and measures.
  $columns_data = ampapi_request('get', 'data/report/columns', TRUE);
  $measures_data = ampapi_request('get', 'data/report/measures', TRUE);

  foreach ($view->field as $field_name => $field_handler) {
    $plugin = ampapi_get_mapper_by_property_name($field_handler->real_field);

    switch ($plugin['report field group']) {
      case 'columns':
        if (empty($columns_data->{$plugin['report field key']})) {
          unset($view->field[$field_name]);
          unset($view->display_handler->handlers['field'][$field_name]);
        }
        break;
      case 'measures':
        if (empty($measures_data->{$plugin['report field key']})) {
          unset($view->field[$field_name]);
          unset($view->display_handler->handlers['field'][$field_name]);
        }
        break;
    }
  }

  foreach ($view->filter as $filter_name => $filter_handler) {
    $plugin = ampapi_get_mapper_by_property_name($filter_handler->real_field);

    switch ($plugin['report field group']) {
      case 'columns':
        if (empty($columns_data->{$plugin['report field key']})) {
          unset($view->filter[$filter_name]);
          unset($view->display_handler->handlers['filter'][$filter_name]);
        }
        break;
      case 'measures':
        if (empty($measures_data->{$plugin['report field key']})) {
          unset($view->filter[$filter_name]);
          unset($view->display_handler->handlers['filter'][$filter_name]);
        }
        break;
    }
  }
}
