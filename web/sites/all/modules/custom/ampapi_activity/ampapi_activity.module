<?php

/**
 * Define administrative URLs.
 */
define('AMPACTIVITY_UI_PATH', 'activity');
define('AMPACTIVITY_ADMIN_UI_PATH', 'admin/content/activity');
define('AMPACTIVITY_BUNDLE_ADMIN_UI_PATH', 'admin/structure/activity');


interface activityMapperAutocompleteInterface {
  public function autocomplete($plugin, $string);
  public function getAutocompleteValue($plugin, $data, $type);
}

interface activityMapperOptionsInterface {
  public function getMatchedValue($plugin, $lookup_value);
}

/**
 * Implements hook_entity_info().
 */
function ampapi_activity_entity_info() {
  $entity_info = array();

  $entity_info['activity'] = array(
    'label' => t('Activity'),
    'plural label' => t('Activities'),
    'description' => t('A survey activity.'),

    // We don't have a base table, entities are stored in AMP.
    'base table' => NULL,
    'api resource path' => 'data/report/custom/paginate',
    'module' => 'ampapi_activity',

    'entity class' => 'ActivityEntity',
    'controller class' => 'ActivityEntityController',
    // 'extra fields controller class' => 'ampAPIExtraFieldsController',
    'metadata controller class' => 'ampAPIMetadataController',
    // 'i18n controller class' => 'EntityDefaultI18nStringController',

    'entity cache' => FALSE,
    'field cache' => FALSE,
    'static cache' => TRUE,

    'fieldable' => FALSE,

    'access callback' => 'ampapi_activity_access',
    'uri callback' => 'entity_class_uri',
    // 'load hook' => 'ampapi_load',

    'entity keys' => array(
      'id' => 'id',
      // 'revision' => 'vid',
      // 'bundle' => 'type',
      'label' => 'title',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      // 'bundle' => 'type',
    ),
    // 'bundles callback' => 'ampapi_activity_get_types',

    // 'admin ui' => array(
    //   'path' => AMPACTIVITY_ADMIN_UI_PATH,
    //   'entity path' => AMPACTIVITY_UI_PATH,
    //   'bundle path' => AMPACTIVITY_BUNDLE_ADMIN_UI_PATH,
    //   'controller class' => 'EntityContentUIController',
    //   'file' => 'ampapi_activity.admin.inc',
    // ),

    // 'view modes' => array(
    //   'full' => array(
    //     'label' => t('Full content'),
    //     'custom settings' => FALSE,
    //   ),
    // ),
  );

  // foreach ($entity_info['activity']['bundles callback'] as $type => $bundle_info) {
  //   $entity_info['activity']['bundles'][$type] = array(
  //     'label' => $bundle_info['label'],
  //     'admin' => array(
  //       'path' => AMPACTIVITY_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
  //     ),
  //   );
  // }

  return $entity_info;
}

/**
 * Implements hook_entity_query_alter().
 */
function ampapi_activity_entity_query_alter($query) {
  if (isset($query->entityConditions['entity_type'])) {
    $entity_type = $query->entityConditions['entity_type']['value'];
    if ($entity_type == 'activity') {
      // Use custom EntityFieldQuery executeCallback for entities loaded from the AMP API.
      $query->executeCallback = 'ampapi_execute_query';
    }
  }
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function ampapi_activity_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
  if ($owner == 'ampapi' && $plugin_type == 'mapper') {
    return 'plugins/mappers';
  }
}

/**
 * Implements hook_views_api().
 */
function ampapi_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ampapi_activity') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function ampapi_activity_menu() {
  $items = array();


  $mappers = ampapi_get_mappers();
  foreach ($mappers as $key => $plugin) {
    if (empty($plugin['property name'])) {
      continue;
    }

    $items['ampapi/autocomplete/' . $plugin['property name']] = array(
      'title' => $plugin['title'] . ' Autocomplete',
      'page callback' => 'ampapi_activity_autocomplete',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'ampapi_activity.pages.inc',
    );
  }

  // @TODO: Add session token to prevent users abusing the system.
  $items['activities/export'] = array(
    'title' => 'Activity search export',
    'page callback' => 'ampapi_activity_search_export',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ampapi_activity.pages.inc',
  );

  $items['admin/settings/search'] = array(
    'title' => 'Search settings',
    'description' => 'AMP search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ampapi_activity_search_settings_form'),
    'access arguments' => array('helpergeneric administer settings'),
    'file' => 'ampapi_activity.admin.inc',
  );

  return $items;
}

/**
 * Returns the size of a file.
 */
function _ampapi_human_filesize($path, $decimals = 2) {
  $bytes = filesize($path);

  $factor = floor((strlen($bytes) - 1) / 3);

  $sz = 'BKMGTP';
  $suffix = ' ' . (($factor == 0) ? @$sz[$factor] : @$sz[$factor] . 'B');
  return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . $suffix;
}

/**
 * Implements hook_views_pre_build()
 *
 * Update all displays of the Activities view and remove disabled fields and filters.
 */
function ampapi_activity_views_pre_build(View &$view) {
  if ($view->name != 'activities') {
    return;
  }

  // Populate the exposed_input array.
  $view->get_exposed_input();

  // Determine if the current search is a SSC search.
  $ssc_search_enabled = FALSE;
  if (ampapi_activity_ssc_status()) {
    if (isset($view->exposed_input['stype']) && $view->exposed_input['stype'] == 'ssc') {
      $ssc_search_enabled = TRUE;
    }
  }
  $search_settings = ampapi_activity_get_search_settings();

  // Get a list of enabled columns and measures.
  $columns_data = ampapi_request('get', 'data/report/columns', TRUE);
  $measures_data = ampapi_request('get', 'data/report/measures', TRUE);

  foreach ($view->field as $field_name => $field_handler) {
    $field_enabled = TRUE;
    $mapper_plugin = ampapi_get_mapper_by_property_name($field_handler->real_field);
    $field_key = $mapper_plugin['report field key'];

    // Hide fields disabled in the PP search settings.
    if (!in_array($field_name, $search_settings['enabled_columns'])) {
      $field_enabled = FALSE;
    }

    // Hide fields disabled in AMP.
    if ($mapper_plugin['report field group'] == 'columns') {
      if (empty($columns_data->{$field_key})) {
        $field_enabled = FALSE;
      }
    }
    else if ($mapper_plugin['report field group'] == 'measures') {
      if (empty($measures_data->{$field_key})) {
        $field_enabled = FALSE;
      }

      // Disable SSC specific columns if SSC functionality is disabled.
      if (!$ssc_search_enabled && !empty($mapper_plugin['report field ssc'])) {
        $field_enabled = FALSE;
      }
      else if ($ssc_search_enabled && empty($mapper_plugin['report field ssc'])) {
        $field_enabled = FALSE;
      }
    }

    // Hide external_url field in exports.
    if ($field_name == 'external_url' && $view->current_display == 'export_page') {
      $field_enabled = FALSE;
    }

    if (!$field_enabled) {
      unset($view->field[$field_name]);
      unset($view->display_handler->handlers['field'][$field_name]);
    }
  }

  foreach ($view->filter as $filter_name => $filter_handler) {
    $filter_enabled = TRUE;

    if ($filter_name == 'activities_search_type') {
      // Hide Search type selector for SSC activities.
      if (!$ssc_search_enabled) {
        $filter_enabled = FALSE;
      }
    }
    else {
      $mapper_plugin = ampapi_get_mapper_by_property_name($filter_handler->real_field);
      $filter_key = $mapper_plugin['report field key'];

      // Handle global "Humanitarian Aid" filter.
      // @see helpergeneric_api_settings_form()
      if ($filter_name == 'humanitarian_aid') {
        $api_settings = helpergeneric_get_api_settings();

        if (!empty($api_settings['humanitarian_aid_only'])) {
          // Update the filter defaults. Defaults for the display_handler
          // filter are also updated.
          // Hide the filter.
          $view->filter[$filter_name]->options['exposed'] = FALSE;

          // Display only "Humanitarian Aid" data.
          // NOTE: Changing the value here only works if the filter is not
          // exposed. Otherwise the form values will override this change.
          $view->filter[$filter_name]->value = TRUE;
        }
      }

      // Hide filters disabled in AMP.
      if ($mapper_plugin['report field group'] == 'columns') {
        if (empty($columns_data->{$filter_key})) {
          $filter_enabled = FALSE;
        }
      }
      else if ($mapper_plugin['report field group'] == 'measures') {
        if (empty($measures_data->{$filter_key})) {
          $filter_enabled = FALSE;
        }
      }
    }

    if (!$filter_enabled) {
      // Remove filter from both the view and the display handler.
      unset($view->filter[$filter_name]);
      unset($view->display_handler->handlers['filter'][$filter_name]);
    }
  }
}

/**
 * Returns the Activities search settings.
 */
function ampapi_activity_get_search_settings() {
  $settings = variable_get('ampapi_activity_search_settings', array());

  // Enable default fields.
  if (empty($settings['enabled_columns'])) {
    $settings['enabled_columns'] = drupal_map_assoc(array(
      'actual_commitments',
      'actual_disbursements',
      'actual_completion_date',
      'beneficiary_agency',
      'donor_agency',
      'location',
      'primary_sector',
    ));
  }

  // Always enable the activity ID, title an external URL.
  $settings['enabled_columns'] += drupal_map_assoc(array(
    'id',
    'title',
    'external_url',
  ));

  if (empty($settings['default_sort'])) {
    $settings['default_sort'] = 'title';
  }

  if (empty($settings['ssc_status'])) {
    $settings['ssc_status'] = FALSE;
  }

  return $settings;
}

/**
 * Returns the status of the SSC functionality.
 */
function ampapi_activity_ssc_status() {
  $search_settings = ampapi_activity_get_search_settings();

  return $search_settings['ssc_status'];
}
